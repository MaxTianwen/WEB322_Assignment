<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modify Articles</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/main.css" rel="stylesheet">
</head>
<body>
    <!-- Include Header with Navigation -->
    <%- include('partials/header', {page: '/articles/modify' }) %>

    <!-- Content Area -->
    <main class="container my-4">
        <div class="content p-4 bg-light">
            <h2>Modify Articles</h2>

            <!-- Deal with no data found -->
            <% if (!articles || articles.length === 0) { %>
                <p>No articles found!</p>
            <% } else { %>
                <!-- Display Articles -->
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>Title</th>
                            <th>Author</th>
                            <th>Published</th>
                            <th>Category</th>
                            <th>Article Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% articles.forEach(article=> { %>
                            <tr>
                                <td><%= article.title %></td>
                                <td><%= article.author %></td>
                                <td><%= article.published ? 'Yes' : 'No' %></td>
                                <td><%= article.categoryName %></td>
                                <td><%= article.articleDate.toISOString().split('T')[0] %></td> <!-- Format the date to YYYY-MM-DD -->
                                <td>
                                    <!-- Create Edit and Delete button -->
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-info btn-sm edit-btn" data-article-id="<%= article.id %>">Edit</button>
                                        <button type="button" class="btn btn-secondary btn-sm delete-btn" data-article-id="<%= article.id %>">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            <% } %>
        </div>
    </main>

    <!-- Create Edit Modal Using BootStrap -->
    <div class="modal fade" id="editModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit Article</h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editForm">
                        <input type="hidden" name="_method" value="PUT">
                        <!-- Add an hidden articleID input for update method-->
                        <input type="hidden" name="id" id="articleId">
                        <!-- Include Form Body -->
                        <%- include('partials/forms', {page: '/forms' }) %>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="save-btn">Save Changes</button>
                    <button type="button" class="btn btn-secondary" id="cancel-btn" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Events when clicking edit/delete button -->
    <script>
        // Wait until DOM has been fully loaded
        document.addEventListener('DOMContentLoaded', (event) => {
            // Get Edit Buttons of all articles
            const editBtns = document.getElementsByClassName('edit-btn');
            // Get Delete Buttons of all articles
            const deleteBtns = document.getElementsByClassName('delete-btn');
            // Get Edit Modal
            const editModal = document.getElementById('editModal');
            // Get Save Changes Button
            const saveChangesBtn = document.getElementById('save-btn');
            // Get Cancel Button
            const cancelBtn = document.getElementById('cancel-btn');
            // Initialize the edit modal
            let modal = null;

            /* Edit Button Click Event */
            // Add Event Listener to each Edit Button
            Array.from(editBtns).forEach((editBtn) => {
                editBtn.addEventListener('click', (event) => {
                    // Get Article ID
                    const articleId = editBtn.getAttribute('data-article-id');
                    // Fetch Article Data Using Fetch API
                    fetch(`/api/articles/${articleId}`)
                        // Parse JSON response
                        .then(response => response.json())
                        // Fill the forms with fetched Article Data
                        .then(data => {
                            document.getElementById('articleId').value = data.id;
                            document.getElementById('title').value = data.title;
                            document.getElementById('author').value = data.author;
                            document.getElementById('published').checked = data.published;
                            document.getElementById('category').value = data.category;
                            document.getElementById('content').value = data.content;
                            document.getElementById('featureImage').value = data.featureImage;

                            // Show the Edit Modal with Bootstrap style
                            modal = new bootstrap.Modal(editModal);
                            modal.show();
                        })
                        // Error Handling
                        .catch(() => window.alert('Failed to fetch article data'));
                });
            });

            /* Delete Button Click Event */
            // Add Event Listener to each Delete Button
            Array.from(deleteBtns).forEach((deleteBtn) => {
                deleteBtn.addEventListener('click', (event) => {
                    // Get Article ID
                    let articleId = deleteBtn.getAttribute('data-article-id');
                    // Get the row of clicked delete button in the table
                    let row = deleteBtn.closest('tr');

                    // Prompt user to confirm
                    if (window.confirm('Are you sure to delete this article?')) {
                        // Delete the article using Fetch API
                        fetch(`/articles/${articleId}`, {
                            // Use the overloaded DELETE method
                            method: 'DELETE'
                        })
                            // Parse JSON response
                            .then(response => response.json())
                            // Remove the row from the table and show the message
                            .then(data => {
                                if (data.message === 'Article deleted successfully') {
                                    row.remove();
                                    window.alert('Article deleted successfully');
                                } else {
                                    window.alert('Failed to delete article');
                                }
                            })
                            // Error Handling
                            .catch(() => window.alert('Failed to delete article'));
                    }
                })
            });

            /* Save Changes Button Click Event */
            // Add Event Listener to Save Changes Button
            saveChangesBtn.addEventListener('click', (event) => {
                // Retrieve the edit form
                let form = document.getElementById('editForm');
                // Create a FormData object to store the form data
                let formData = new FormData(form); 
                // Get the selected article ID
                let articleId = formData.get('id');

                // Add image to the form if it is valid
                let featureImage = document.getElementById('featureImage');
                if (featureImage) {
                    formData.set('featureImage', featureImage.files[0]);
                }

                // Update the checkbox of published status if it is changed
                let publishedStatus = document.getElementById('published');
                formData.set('published', publishedStatus.checked);

                // Update the article using Fetch API
                fetch(`/articles/${articleId}`, {
                    // Use the overloaded PUT method
                    method: 'PUT',
                    // Send the form data
                    body: formData
                })
                    // Parse JSON response
                    .then(response => response.json())
                    // Close the modal and show the message
                    .then(data => {
                        if (data.message === 'Article updated successfully') {
                            // Hide the edit modal
                            modal.hide();
                            window.alert('Article updated successfully');
                            // Refresh the page to reflect the changes
                            window.location.reload();
                        } else {
                            window.alert('Failed to update article');
                        }
                    })
                    // Error Handling
                    .catch(() => window.alert('Failed to update article'));
            });

            /* Cancel Button Click Event */
            // Add Event Listener to Cancel Button
            cancelBtn.addEventListener('click', (event) => {
                // Hide the edit modal
                if (modal) {
                    modal.hide();
                }
            });
        });
    </script>
</body>
</html>
